%
% distributors & nullitors (annihilators) for a bimonoidal category (=rig category)
% See: [Comfort2020], [Laplaza1971].
%

%assign(end_size, 4).


formulas(assumptions).
% undefined --------------
ldist(x,y,z)=E <-> (x=E | y=E | z=E | -object(x) | -object(y) | -object(z)).
rdist(x,y,z)=E <-> (x=E | y=E | z=E | -object(x) | -object(y) | -object(z)).
lnull(x)=E <-> (x=E | -object(x)).
rnull(x)=E <-> (x=E | -object(x)).

% distributors: src, tgt, iso

object(x) & object(y) & object(z) ->
    (src(ldist(x,y,z)) = x@(y+z) & tgt(ldist(x,y,z)) = (x@y)+(x@z)).
object(x) & object(y) & object(z) ->
    (src(rdist(x,y,z)) = (x+y)@z & tgt(rdist(x,y,z)) = (x@z)+(y@z)).
object(x) & object(y) & object(z) ->
    iso(ldist(x,y,z)).
object(x) & object(y) & object(z) ->
    iso(rdist(x,y,z)).

% distributors: naturality
(w!=E)->(
    (x=src(w) & x1=tgt(w) & object(y) & object(z)) ->
    ( (w@y)+(w@z) )*ldist(x,y,z) = ldist(x1,y,z)*( w@(y+z) )
).
(w!=E)->(
    (y=src(w) & y1=tgt(w) & object(x) & object(z)) ->
    ( (x@w)+(x@z) )*ldist(x,y,z) = ldist(x,y1,z)*( x@(w+z) )
).
(w!=E)->(
    (z=src(w) & z1=tgt(w) & object(x) & object(y)) ->
    ( (x@y)+(x@w) )*ldist(x,y,z) = ldist(x,y,z1)*( x@(y+w) )
).
(w!=E)->(
    (x=src(w) & x1=tgt(w) & object(y) & object(z)) ->
    ( (w@z)+(y@z) )*rdist(x,y,z) = rdist(x1,y,z)*( (w+y)@z )
).
(w!=E)->(
    (y=src(w) & y1=tgt(w) & object(x) & object(z)) ->
    ( (x@z)+(w@z) )*rdist(x,y,z) = rdist(x,y1,z)*( (x+w)@z )
).
(w!=E)->(
    (z=src(w) & z1=tgt(w) & object(x) & object(y)) ->
    ( (x@w)+(y@w) )*rdist(x,y,z) = rdist(x,y,z1)*( (x+y)@w )
).

% nullitors: src, tgt, iso
object(x) -> (src(lnull(x))=(addzero@x) & tgt(lnull(x))=addzero).
object(x) -> (src(rnull(x))=(x@addzero) & tgt(rnull(x))=addzero).
object(x) -> iso(lnull(x)).
object(x) -> iso(rnull(x)).

% nullitors: naturality
(w!=E)->((x=src(w) & x1=tgt(w)) -> ( lnull(x1)*(addzero@w) = lnull(x) )).
(w!=E)->((x=src(w) & x1=tgt(w)) -> ( rnull(x1)*(w@addzero) = rnull(x) )).


% -----------------------------------------------------------
% -----------------------------------------------------------
% -----------------------------------------------------------
% Laplaza axioms (I) - (XXIV)
%
%

% (I)
(object(x) & object(y) & object(z)) ->
sym_add(x@y,x@z)*ldist(x,y,z) = ldist(x,z,y)*(x@sym_add(y,z)).

% (II) only for sym_mul
(object(x) & object(y) & object(z)) ->
(sym_mul(x,z)+sym_mul(y,z))*rdist(x,y,z) = ldist(z,x,y)*sym_mul(x+y,z).

% (III)
(object(x) & object(y) & object(z)) ->
sym_add(x@z,y@z)*rdist(x,y,z) = rdist(y,x,z)*(sym_add(x,y)@z).

% (IV)
(object(x) & object(y) & object(z) & object(u)) ->
assoc_add(x@u, y@u, z@u) * ( (x@u)+rdist(y,z,u) ) * rdist(x,y+z,u) =
    (rdist(x,y,u)+(z@u)) * rdist(x+y,z,u) * (assoc_add(x,y,z)@u).

% (V)
(object(x) & object(y) & object(z) & object(u)) ->
assoc_add(x@y,x@z,x@u) * ((x@y)+ldist(x,z,u)) * ldist(x,y,z+u) =
    (ldist(x,y,z)+(x@u)) * ldist(x,y+z,u) * (x@assoc_add(y,z,u)).

% (VI)
(object(x) & object(y) & object(z) & object(u)) ->
(assoc_mul(x,y,z)+assoc_mul(x,y,u)) * ldist(x,y@z,y@u) * (x@ldist(y,z,u)) =
    ldist(x@y,z,u)*assoc_mul(x,y,z+u).

% (VII)
(object(x) & object(y) & object(z) & object(u)) ->
(assoc_mul(x,z,u)@assoc_mul(y,z,u)) * rdist(x,y,z@u) =
    rdist(x@z,y@z,u) * (rdist(x,y,z)@u) * assoc_mul(x+y,z,u).

% (VIII)
(object(x) & object(y) & object(z) & object(u)) ->
(assoc_mul(x,y,u)@assoc_mul(x,z,u))*ldist(x,y@u,z@u)*(x@rdist(y,z,u)) =
    rdist(x@y,x@z,u)*(ldist(x,y,z)@u)*assoc_mul(x,y+z,u).

% (IX)
(object(x) & object(y) & object(z) & object(u)) ->
  (( (x@z) + sym_add(x@u,y@z) )+(y@u))
* (inv(assoc_add(x@z, x@u, y@z)) + (y@u))
* assoc_add((x@z)+(x@u),y@z,y@u)
* (ldist(x,z,u)@ldist(y,z,u))
* rdist(x,y,z+u) 
= (inv(assoc_add(x@z,y@z,x@u))+(y@u))
* assoc_add((x@z)+(y@z),x@u,y@u)
* (rdist(x,y,z)@rdist(z,y,u))
* ldist(x+y,z,u).

% (X)
lnull(addzero) = rnull(addzero).

% (XI)
(object(x) & object(y)) ->
lunit_add(addzero)*(lnull(x)+lnull(y))*ldist(addzero,x,y) = lnull(x+y).

% (XII)
(object(x) & object(y)) ->
lunit_add(addzero)*(rnull(x)+rnull(y))*rdist(x,y,addzero) = rnull(x+y).

% (XIII)
runit_mul(addzero) = lnull(1).

% (XIV)
lunit_mul(addzero) = rnull(1).

% (XV) only for sym_mul
object(u) ->
rnull(u) = lnull(u)*sym_mul(u,addzero).

% (XVI)
(object(x) & object(y)) ->
lnull(y)*(lnull(x)@y)*assoc_mul(addzero,x,y) = lnull(x@y).

% (XVII)
(object(x) & object(y)) ->
lnull(y)*(rnull(x)@y)*assoc_mul(x,addzero,y) = (x@lnull(y))*rnull(x).

% (XVIII)
(object(x) & object(y)) ->
rnull(x)*(x@rnull(y)) = rnull(x@y)*assoc_mul(x,y,addzero).

% (XIX)
(object(x) & object(y)) ->
unit_add(x@y)*(rnull(x)+(y@x))*ldist(x,addzero,y) = x@lunit_add(y).

% (XX)
(object(x) & object(y)) ->
lunit_add(y@x)*(lnull(x)+(y@x))*rdist(addzero,y,x) = lunit_add(y)@x.

% (XXI)
(object(x) & object(y)) ->
runit_add(x@y)*((x@y)+rnull(x))*ldist(x,y,addzero) = x@runit_add(y).

% (XXII)
(object(x) & object(y)) ->
runit_add(x@y)*((x@y)+lnull(y))*rdist(x,addzero,y) = runit_add(x)@y.

% (XXIII)
(object(x) & object(y)) ->
(lunit_mul(x)+lunit_mul(y))*ldist(1,x,y) = lunit_mul(x+y).

% (XXIV)
(object(x) & object(y)) ->
(runit_mul(x)+runit_mul(y))*ldist(x,y,1) = runit_mul(x+y).


end_of_list.

%formulas(goals).
%
%% (II) only for sym_mul
%all A all B all C (
%(A!=E & B!=E & C!=E) ->
%    (sym_mul(A,C)+sym_mul(B,C))*rdist(A,B,C) = ldist(C,A,B)*sym_mul(A+B,C)).
%
%end_of_list.


    
