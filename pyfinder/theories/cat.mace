%
% Category theory (arrows only).
%

assign(max_megs, 2000).
op(601, infix_left,        "*" ).


formulas(assumptions).
% E means undefined --------------
E = 0.
all f (E*f = E).
all f (f*E = E).
all f (src(f)=E <-> f=E).
all f (tgt(f)=E <-> f=E).

% composition, src, tgt --------------------
all f all g (f!=E & g!=E -> (src(g)=tgt(f) <-> (g*f != E))).
all f (tgt(src(f)) = src(f)).
all f (src(tgt(f)) = tgt(f)). % these imply src(src(f))=f & tgt(tgt(f))=f.
all f (f*src(f) = f).
all f (tgt(f)*f = f).
all f all g all h ((f*g)*h = f*(g*h)).

% convenience predicates ------------------
%((object(u) <-> (exists v (v!=E & tgt(v)=u)))).
%-object(E).

-object(E).
x!=E -> (x=src(x) <-> object(x)).

(u=E) | (endo(u) <-> src(u)=tgt(u)).
-endo(E).

%(u=E) | (iso(u) <-> (exists v ((v!=E) & object(v*u) & object(u*v)))).
%-iso(E).
%inv(E)=E.
%(u=E) | (v=E) | (u*v=E) | (v*u=E) |
%  ( (object(u*v)&object(v*u)) <-> (inv(u)=v & inv(v)=u) ).
%(u=E) | (inv(u)=E) | (object(u*inv(u)) & object(inv(u)*u)).
%(u=E) | (iso(u) <-> inv(u)!=E).

u=E | v=E | ((object(u*v) & object(v*u)) <-> inv(u)=v).
inv(E)=E.
u=E | v=E | (inv(u)=E -> (-object(u*v) | -object(v*u))).
u=E | (iso(u) <-> inv(u)!=E).

%(object(u) & object(v)) -> (
%    isomorphic(u,v) <-> (exists f (iso(f) & src(f)=u & tgt(f)=v))).

end_of_list. % ------------------------------


%formulas(assumptions).
%x!=E -> (ident(x) <-> (src(x)=tgt(y) -> x*y=y)).
%-ident(E).
%
%(x=src(x) & y=src(x)) -> (x=y). % yes
%x=src(x) -> (y*x=E | y*x=y). % yes
%x!=E -> (ident(x) <-> (tgt(x)=src(y) -> y*x=y)). % yes
%(ident(x) & ident(y) & src(x)=src(y)) -> (x=y). % yes
%ident(x) -> object(x). % yes
%(x!=E & y!=E) -> ((x*y = src(y) & y*x = tgt(y) & x1*y=src(y) & y*x1=tgt(y)) -> (x=x1)). % yes. uniq inverses.
%(x!=E & inv(x)!=E) -> ( object(x*inv(x)) & object(inv(x)*x) ).
%end_of_list.


