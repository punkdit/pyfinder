%
% Monoidal category theory (arrows only).
%

%assign(end_size, 4).

% https://www.cs.unm.edu/~mccune/prover9/manual/2009-11A/
op(602, infix,        "@" ).


formulas(assumptions).
% undefined --------------
(x@y=E) <-> (x=E | y=E).
lunit_mul(x)=E <-> (x=E | -object(x)).
runit_mul(x)=E <-> (x=E | -object(x)).
assoc_mul(x,y,z)=E <-> (x=E | y=E | z=E | -object(x) | -object(y) | -object(z)).
sym_mul(x,y)=E <-> (x=E | y=E | -object(x) | -object(y)).

% the monoidal unit is an object 1 ------
object(1). 

% the monoidal product --------------
src(x@y) = src(x)@src(y).
tgt(x@y) = tgt(x)@tgt(y).
(v*u!=E & x*w!=E) -> (x@v)*(w@u)=(x*w)@(v*u).

% left unitor -------------------
object(x) -> src(lunit_mul(x)) = 1@x.
object(x) -> tgt(lunit_mul(x)) = x.
object(x) -> iso(lunit_mul(x)).
y!=E -> lunit_mul(tgt(y))*(1@y) = y*lunit_mul(src(y)). % lunit_mul is natural

% right unitor -------------------
object(x) -> src(runit_mul(x)) = x@1.
object(x) -> tgt(runit_mul(x)) = x.
object(x) -> iso(runit_mul(x)).
y!=E -> runit_mul(tgt(y))*(y@1) = y*runit_mul(src(y)). % runit_mul is natural
lunit_mul(1) = runit_mul(1).

% assoc_mul'iativity ----------------------
object(x) & object(y) & object(z) -> src(assoc_mul(x,y,z)) = x@(y@z).
object(x) & object(y) & object(z) -> tgt(assoc_mul(x,y,z)) = (x@y)@z.
object(x) & object(y) & object(z) -> iso(assoc_mul(x,y,z)).

% assoc_mul is natural -----------------------------
u!=E -> (
    (x=src(u) & x1=tgt(u) & object(y) & object(z)) ->
    ((u@y)@z)*assoc_mul(x, y, z) = assoc_mul(x1,y,z)*(u@(y@z))
).
u!=E -> (
    (y=src(u) & y1=tgt(u) & object(x) & object(z)) ->
    ((x@u)@z)*assoc_mul(x, y, z) = assoc_mul(x,y1,z)*(x@(u@z))
).
u!=E -> (
    (z=src(u) & z1=tgt(u) & object(x) & object(y)) ->
    ((x@y)@u)*assoc_mul(x, y, z) = assoc_mul(x,y,z1)*(x@(y@u))
).
%(u!=E & v!=E & w!=E) -> (
%    (x=src(u) & x1=tgt(u) & y=src(v) & y1=tgt(v) & z=src(w) & z1=tgt(w)) ->
%    ((u@v)@w)*assoc_mul(x, y, z) = assoc_mul(x1,y1,z1)*(u@(v@w))
%).

% pentagon ------------------------------
object(u) & object(v) & object(w) & object(x) ->
    assoc_mul(u@v, w, x)*assoc_mul(u, v, w@x) = ((assoc_mul(u,v,w)@x)*assoc_mul(u,v@w,x)*(u@assoc_mul(v,w,x))).

% triangle ------------------------------
%object(u) & object(v) -> runit_mul(u@v) * assoc_mul(u,v,1) = u@runit_mul(v).
%(all u all v (object(u) & object(v) -> (lunit_mul(u)@v) * assoc_mul(1,u,v) = lunit_mul(u@v))).
object(u) & object(v) -> (runit_mul(u)@v) * assoc_mul(u,1,v) = u@lunit_mul(v).


% sym_mul  --------------------------------
object(x) & object(y) -> (src(sym_mul(x,y))=x@y & tgt(sym_mul(x,y))=y@x).
object(x) & object(y) -> iso(sym_mul(x,y)). % redundant ?

(u!=E) -> (
    (x=src(u) & x1=tgt(u) & object(y)) ->
    ( (y@u)*sym_mul(x,y) = sym_mul(x1,y)*(u@y) )). % natural
(u!=E) -> (
    (y=src(u) & y1=tgt(u) & object(x)) ->
    ( (u@x)*sym_mul(x,y) = sym_mul(x,y1)*(x@u) )). % natural (redundant?)

object(x) -> lunit_mul(x)*sym_mul(x,1) = runit_mul(x).

% hexagon ------------------------------------
object(x) & object(y) & object(z) -> (
    (y@sym_mul(x,z))*assoc_mul(y,x,z)*(sym_mul(x,y)@z) =
    assoc_mul(y,z,x)*sym_mul(x,y@z)*assoc_mul(x,y,z)).

% sym_mul'metry
object(x) & object(y) -> (sym_mul(y,x)*sym_mul(x,y) = x@y).



end_of_list.


%formulas(goals).
%object(u) & object(v) -> runit_mul(u@v) * assoc_mul(u,v,1) = u@runit_mul(v).
%end_of_list.

